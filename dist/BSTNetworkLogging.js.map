{"version":3,"sources":["../src/BSTNetworkLogging.ts"],"names":["pingEventType","networkInfoEventType","BSTNetworkLoggingModule","NativeModules","eventEmitter","NativeEventEmitter","registerPingListener","listener","addListener","registerNetworkInfoListener","startPingAsync","domainName","params","options","stopPingAsync","stopAsync","startNetworkLoggingAsync","stopNetworkLoggingAsync","getPhoneInfoAsync","getPhoneInfo","requestPermissions"],"mappings":"mmBAAA,yCAEA,GAAMA,CAAAA,aAAa,CAAG,WAAtB,CACA,GAAMC,CAAAA,oBAAoB,CAAG,mBAA7B,CAEA,GAAMC,CAAAA,uBAAuB,CAAGC,2BAAcD,uBAA9C,CACA,GAAME,CAAAA,YAAY,CAAG,GAAIC,gCAAJ,CAAuBH,uBAAvB,CAArB,CAoGO,QAASI,CAAAA,oBAAT,CAA8BC,QAA9B,CAAwF,CAC7F,MAAOH,CAAAA,YAAY,CAACI,WAAb,CAAyBR,aAAzB,CAAwCO,QAAxC,CAAP,CACD,CAEM,QAASE,CAAAA,2BAAT,CAAqCF,QAArC,CAAsG,CAC3G,MAAOH,CAAAA,YAAY,CAACI,WAAb,CAAyBP,oBAAzB,CAA+CM,QAA/C,CAAP,CACD,CAEM,QAAeG,CAAAA,cAAf,CACLC,UADK,CAELC,MAFK,CAGLC,OAHK,6KAKCX,uBAAuB,CAACQ,cAAxB,CACJC,UADI,CACQC,MADR,CACgBC,OADhB,CALD,gDASA,QAAeC,CAAAA,aAAf,iLACCZ,uBAAuB,CAACa,SAAxB,EADD,iDAIA,QAAeC,CAAAA,wBAAf,4LACQd,uBAAuB,CAACc,wBAAxB,EADR,yGAIA,QAAeC,CAAAA,uBAAf,2LACQf,uBAAuB,CAACe,uBAAxB,EADR,yGAIA,QAAeC,CAAAA,iBAAf,qLACQhB,uBAAuB,CAACiB,YAAxB,EADR,yGAIA,QAAeC,CAAAA,kBAAf,CAAkCP,OAAlC,qLACCX,uBAAuB,CAACkB,kBAAxB,CAA2CP,OAA3C,CADD","sourcesContent":["import {NativeModules, NativeEventEmitter, EmitterSubscription} from 'react-native';\n\nconst pingEventType = '@BST/PING';\nconst networkInfoEventType = '@BST/NETWORK_INFO';\n\nconst BSTNetworkLoggingModule = NativeModules.BSTNetworkLoggingModule;\nconst eventEmitter = new NativeEventEmitter(BSTNetworkLoggingModule);\n\nexport type PingEvents = 'ICMP_PACKET' | 'STATISTIC' | 'SUMMARY' | 'UNKNOWN';\nexport type AllEvents = PingEvents | ('E_RUNTIME_EXCEPTION' | 'E_INVALID_PARAM');\n\nexport type ICMPPacket = {\n  icmpSeq: number;\n  ttl: number;\n  time: number;\n};\n\nexport type PingStatistic = {\n  min: number;\n  avg: number;\n  max: number;\n  mdev: number;\n};\n\nexport type PingSummary = {\n  transmitted: number;\n  received: number;\n  lostPercentage: number;\n};\n\nexport type PingEvent = {\n  type: AllEvents;\n  raw?: string;\n  icmpPacket?: ICMPPacket;\n  statistic?: PingStatistic;\n  summary?: PingSummary;\n};\n\nexport type CellIdentityLte = {\n  bands: number[];\n  bandwidth: number;\n  ci: number;\n  earfcn: number;\n  mccString: string;\n  mncString: string;\n  pci: number;\n  tac: number;\n}\n\nexport type CellSignalStrengthLte = {\n  cqi: number;\n  rsrp: number;\n  rsrq: number;\n  rssi: number;\n  rssnr: number;\n  timingAdvance: number;\n}\n\nexport type CellInfoLte = {\n  cellIdentity: CellIdentityLte;\n  cellSignalStrength: CellSignalStrengthLte;\n}\n\nexport type CellIdentityNr = {\n  mccString: string;\n  mncString: string;\n  nci: number;\n  nrarfcn: number;\n  pci: number;\n  tac: number;\n};\n\nexport type CellSignalStrengthNr = {\n  csiRsrp: number;\n  csiRsrq: number;\n  csiSinr: number;\n  ssRsrp: number;\n  ssRsrq: number;\n  ssSinr: number;\n};\n\nexport type CellInfoNr = {\n  cellIdentity: CellIdentityNr;\n  cellSignalStrength: CellSignalStrengthNr;\n};\n\nexport type NetworkInfoEvent = {\n  lte: CellInfoLte[];\n  nr: CellInfoNr[];\n};\n\nexport type PhoneInfo = {\n  imsi: String;\n  imei: String;\n  model: String;\n};\n\nexport type RequestPermissionOptions = {\n  requestPermission: boolean;\n};\n\nexport type PingParams = {\n  durationSeconds?: number;\n  reportIntervalSeconds?: number;\n};\n\nexport function registerPingListener(listener: (event: PingEvent) => any): EmitterSubscription {\n  return eventEmitter.addListener(pingEventType, listener);\n}\n\nexport function registerNetworkInfoListener(listener: (event: NetworkInfoEvent) => any): EmitterSubscription {\n  return eventEmitter.addListener(networkInfoEventType, listener);\n}\n\nexport async function startPingAsync(\n  domainName: string,\n  params?: PingParams,\n  options?: {[name: string]: string},\n): Promise<void> {\n  await BSTNetworkLoggingModule.startPingAsync(\n    domainName, params, options);\n}\n\nexport async function stopPingAsync(): Promise<void> {\n  await BSTNetworkLoggingModule.stopAsync();\n}\n\nexport async function startNetworkLoggingAsync(): Promise<void> {\n  return await BSTNetworkLoggingModule.startNetworkLoggingAsync();\n}\n\nexport async function stopNetworkLoggingAsync(): Promise<void> {\n  return await BSTNetworkLoggingModule.stopNetworkLoggingAsync();\n}\n\nexport async function getPhoneInfoAsync(): Promise<PhoneInfo> {\n  return await BSTNetworkLoggingModule.getPhoneInfo();\n}\n\nexport async function requestPermissions(options:RequestPermissionOptions): Promise<void> {\n  await BSTNetworkLoggingModule.requestPermissions(options);\n}\n\n"],"file":"BSTNetworkLogging.js"}